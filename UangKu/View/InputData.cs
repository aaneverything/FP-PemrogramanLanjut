using System;
using System.Windows.Forms;
using UangKu.Controller;
using UangKu.Model.Context;
using UangKu.Model.Entity;

namespace UangKu.View
{
    public partial class InputData : Form
    {
        // Delegete
        public delegate void HandleCreateData(Transaction transaction);

        // hubungkan dengan transactionController dan Entitas Transaction
        private transactionController controller;
        private HistoryController contHistory;
        private Transaction transaction;
        private TransactionHistory history;

        bool isNewData = true;
        static int userId = Login.getUserId;

        // event
        public event HandleCreateData OnCreateData;
        public event HandleCreateData OnUpdateData;

        public InputData()
        {
            controller = new transactionController();
            contHistory = new HistoryController(new DbContext()); // Initialize contHistory
            InitializeComponent();
            rdbIncome.Checked = true;
            dtaDate.Value = DateTime.Now;
        }

        public InputData(string title, transactionController controller)
       : this()
        {
            this.Text = title;
            this.controller = controller;
        }

        public InputData(string title, Transaction obj, transactionController controller)
        : this()
        {
            this.Text = title;
            this.controller = controller;
            isNewData = false;
            lblTIttle.Text = "Update Data";
            transaction = obj;
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.Dispose();
        }

        private void InputData_FormClosed(object sender, FormClosedEventArgs e)
        {
            this.Close();
        }

         private void btnDone_Click(object sender, EventArgs e)
         {
            int result = 0;
            string category = null;

            if (rdbIncome.Checked)
            {
                category = "Income";
            }
            else
            {
                category = "Outcome";
            }

            if (string.IsNullOrEmpty(txtAmount.Text) || !int.TryParse(txtAmount.Text, out int amount))
            {
                MessageBox.Show("Isi jumlah transaksi dengan angka yang valid!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            try
            {
                if (isNewData)
                {
                    // Creating new transaction
                    transaction = new Transaction
                    {
                        // Transaction_id should not be set here, it will be generated by the database
                        Transaction_category = category,
                        Transaction_date = dtaDate.Value.ToString("yyyy-MM-dd"),
                        Transaction_amount = amount,
                        Nama_Method = cmbMethod.SelectedItem.ToString(),
                        Transaciton_name = txtDescription.Text
                    };

                    // Saving the transaction and getting the generated Transaction_id
                    int newTransactionId = controller.Create(transaction, userId);

                    // Check if the transaction was successfully inserted
                    if (newTransactionId > 0)
                    {
                        // Set the Transaction_id in the history object
                        history = new TransactionHistory
                        {
                            Transaction_id = newTransactionId,
                            Nama_History = category,
                            Transaction_date = dtaDate.Value,
                            Transaction_amount = amount
                        };

                        // Saving the history
                        contHistory.Create(history, userId);

                        // Close the form only if the creation was successful
                        OnCreateData(transaction);
                        this.Close();
                    }
                    else
                    {
                        MessageBox.Show("Failed to insert the transaction.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                {
                    // Creating new history entry
                    history = new TransactionHistory
                    {
                        // The same issue might happen here
                        Transaction_id = transaction.Transaction_id,
                        Nama_History = category,
                        Transaction_date = dtaDate.Value,
                        Transaction_amount = amount
                    };

                    // Saving the transaction and history
                    result = controller.Update(transaction);
                    contHistory.Create(history, userId);

                    MessageBox.Show(result.ToString());
                    // Close the form only if the creation was successful
                    if (result > 0)
                    {
                        OnUpdateData(transaction);
                        this.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"An error occurred: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        private void txtDescription_TextChanged(object sender, EventArgs e)
        {

        }

        private void rdbOutcome_CheckedChanged(object sender, EventArgs e)
        {

        }
    }
}

